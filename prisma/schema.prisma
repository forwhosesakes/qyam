
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}


model User {
  id              String    @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  cvKey           String?
  bio             String?
  phone           Int?
  acceptenceState String? @default("idle")
  trainingHours Int @default(0)
  noStudents Int @default(0)
  region String  @default("none")
  level String @default("LEVEL_1")

  @@unique([email])
  @@map("user")
  Session Session[]
  Account Account[]
  UserCertificate UserCertificate[]
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Material {
  id          String      @id @default(cuid())
  storageKey  String
  title       String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  published   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("material")
}


model Program {
  id          String      @id @default(cuid())
  link        String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("program")
}


model Category {
  id          String      @id @default(cuid())
  title       String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title])
  @@map("category")
  Material Material[]
}

model Article {
  id          String   @id @default(cuid()) 
  title       String   
  description String  
  image       String?   @db.Text
  content     String  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt    

  @@map("article")
}



model UserCertificate {
  id   String  @id @default(cuid())
  userId String 
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentType String
  size      Int
  certificateKey String
  name String
  @@map("userCertificate")




}